@page "/authors/"
@inject IAuthorService authorService
@inject IJSRuntime js

<h3>Authors</h3>
<hr />

@if (response.Success == false)
{
    <div class="alert alert-info">
        <h4>
            Something went wrong trying to get data.
        </h4>
    </div>

    <hr />
}

@if (Model == null)
{
    <div class="alert alert-info">
        <h4>
            Please wait, loading..
        </h4>
    </div>
}
else
{

    <AuthorizeView Roles="Administrator">
        <a class="btn btn-outline-success" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span> Create</a>
        <br />
        <br />
    </AuthorizeView>
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <AuthorizeView Roles="Administrator">
                    <th>Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in Model)
            {
                <tr>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <AuthorizeView Roles="Administrator">
                            <a class="btn btn-outline-info" href="/authors/details/@author.Id"><span class="oi oi-book" aria-hidden="true"></span> </a>
                            <a class="btn btn-outline-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span></a>
                            <a class="btn btn-outline-danger" @onclick=@(() => DeleteAuthor(author.Id))><span class="oi oi-trash" aria-hidden="true"></span></a>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AuthorReadOnlyDto> Model;
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await authorService.GetActiveAuthorListAsync();

        if (response.Success)
        {
            Model = response.Data;
        }
        else
        {
            Model = new List<AuthorReadOnlyDto>();
        }
    }

    private async Task DeleteAuthor(int authorId)
    {
        var author = Model.First(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {author.FirstName} {author.LastName} ?");

        if (confirm)
        {
            var response = await authorService.DeleteAuthor(authorId);

            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
