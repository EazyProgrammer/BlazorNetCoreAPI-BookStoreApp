@page "/users/register"

@inject IClient httpClient

@inject NavigationManager navManager


<h3>Register New Account</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>

        <br />

        <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>

        <br />

        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>

        <br />

        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.PasswordHash" />
            <ValidationMessage For="@(() => RegistrationModel.PasswordHash)" />
        </div>

        <br />
        <button type="submit" class="btn btn-primary btn-block">Register Account</button>
    </EditForm>
</div>

@code {
    ApplicationUserDto RegistrationModel = new ApplicationUserDto { Role = "User" };
    string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            var result = await httpClient.RegisterAsync(RegistrationModel);

            if (result == null)
            {
                message = "Something went wrong, please try again";
                return;
            }

            navManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            message = ex.Message;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}
