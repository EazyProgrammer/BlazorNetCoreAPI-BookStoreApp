@page "/authors/"
@inject IAuthorService authorService
@inject IJSRuntime js

<h3>Authors</h3>
<hr />

@if (response.Success == false)
{
    <div class="alert alert-info">
        <h4>
            Something went wrong trying to get data.
        </h4>
    </div>

    <hr />
}

@if (Model == null)
{
    <div class="alert alert-info">
        <h4>
            Please wait, loading..
        </h4>
    </div>
}
else
{
    <AuthorizeView Roles="Administrator">
        <a class="btn btn-outline-success" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span> Create</a>
        <br />
        <br />
    </AuthorizeView>
 
    <AuthorTable Authors="Model" TotalSize="TotalSize" OnScroll="LoadAuthors" />
}

@code {
    public int TotalSize{ get; set; }
    public List<AuthorReadOnlyDto> Model = new List<AuthorReadOnlyDto>();
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };

    private async Task LoadAuthors(QueryParameters parameters)
    {
        var virtualizedResult = await authorService.GetActiveAuthorListByParameterAsync(parameters);
        Model = virtualizedResult.Data != null ? virtualizedResult.Data.Items.ToList() : new List<AuthorReadOnlyDto>();
        TotalSize = virtualizedResult.Data != null ? virtualizedResult.Data.TotalSize : 0;
    }
}
